diff --git a/kernel/common/inc/nv-linux.h b/kernel/common/inc/nv-linux.h
index 0d7e516..dae9c09 100644
--- a/kernel/common/inc/nv-linux.h
+++ b/kernel/common/inc/nv-linux.h
@@ -115,7 +115,9 @@

 #include <linux/moduleparam.h>      /* module_param()                   */
 #include <asm/tlbflush.h>           /* flush_tlb(), flush_tlb_all()     */
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
 #include <asm/kmap_types.h>         /* page table entry lookup          */
+#endif

 #include <linux/pci.h>              /* pci_find_class, etc              */
 #include <linux/interrupt.h>        /* tasklets, interrupt helpers      */
diff --git a/kernel/conftest.sh b/kernel/conftest.sh
index 23aca36..cc9543b 100755
--- a/kernel/conftest.sh
+++ b/kernel/conftest.sh
@@ -1729,6 +1729,8 @@ compile_test() {
             # Determine if the DRM subsystem is usable
             #
             CODE="
+            #include <linux/version.h>
+
             #if defined(NV_DRM_DRMP_H_PRESENT)
             #include <drm/drmP.h>
             #endif
@@ -1737,6 +1739,10 @@ compile_test() {
             #include <drm/drm_drv.h>
             #endif

+            #if defined(NV_DRM_DRM_GEM_H_PRESENT)
+            #include <drm/drm_gem.h>
+            #endif
+
             #if defined(NV_DRM_DRM_PRIME_H_PRESENT)
             #include <drm/drm_prime.h>
             #endif
@@ -1746,13 +1752,22 @@ compile_test() {
             #endif

             void conftest_drm_available(void) {
-                struct drm_driver drv;

                 /* 2013-01-15 89177644a7b6306e6084a89eab7e290f4bfef397 */
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
+                // Avoid failure due to all the changes in torvalds/linux commit d693def4fd1c23f1ca5aed1afb9993b3a2069ad2
+                struct drm_driver drv;
                 drv.gem_prime_pin = 0;
                 drv.gem_prime_get_sg_table = 0;
                 drv.gem_prime_vmap = 0;
                 drv.gem_prime_vunmap = 0;
+#else
+                struct drm_gem_object_funcs gem;
+                gem.pin = 0;
+                gem.get_sg_table = 0;
+                gem.vmap = 0;
+                gem.vunmap = 0;
+#endif
                 (void)drm_gem_prime_import;
                 (void)drm_gem_prime_export;

diff --git a/kernel/nvidia-drm/nvidia-drm-crtc.c b/kernel/nvidia-drm/nvidia-drm-crtc.c
index 780df0e..35eb1e4 100644
--- a/kernel/nvidia-drm/nvidia-drm-crtc.c
+++ b/kernel/nvidia-drm/nvidia-drm-crtc.c
@@ -20,6 +20,7 @@
  * DEALINGS IN THE SOFTWARE.
  */

+#include <linux/version.h>
 #include "nvidia-drm-conftest.h" /* NV_DRM_ATOMIC_MODESET_AVAILABLE */

 #if defined(NV_DRM_ATOMIC_MODESET_AVAILABLE)
@@ -336,9 +337,19 @@ static int head_modeset_config_attach_connector(
  * the 'nv_drm_crtc_state::req_config', that is fine becase 'nv_drm_crtc_state'
  * will be discarded if ->atomic_check() fails.
  */
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
 static int nv_drm_crtc_atomic_check(struct drm_crtc *crtc,
                                     struct drm_crtc_state *crtc_state)
+#else
+// Changes in torvalds/linux commit d693def4fd1c23f1ca5aed1afb9993b3a2069ad2
+static int nv_drm_crtc_atomic_check(struct drm_crtc *crtc,
+                                    struct drm_atomic_state *atomic_state)
+#endif
 {
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 11, 0))
+    // Changes in torvalds/linux commit d693def4fd1c23f1ca5aed1afb9993b3a2069ad2
+    struct drm_crtc_state *crtc_state = drm_atomic_get_new_crtc_state(atomic_state, crtc);
+#endif
     struct nv_drm_crtc_state *nv_crtc_state = to_nv_crtc_state(crtc_state);
     struct NvKmsKapiHeadRequestedConfig *req_config =
         &nv_crtc_state->req_config;
@@ -408,8 +419,14 @@ static void nv_drm_crtc_disable(struct drm_crtc *crtc)
 }

 #ifdef NV_DRM_CRTC_HELPER_FUNCS_HAS_ATOMIC_ENABLE
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
 static void nv_drm_crtc_atomic_enable(struct drm_crtc *crtc,
                                       struct drm_crtc_state *old_crtc_state)
+#else
+// Changes in torvalds/linux commit d693def4fd1c23f1ca5aed1afb9993b3a2069ad2
+static void nv_drm_crtc_atomic_enable(struct drm_crtc *crtc,
+                                      struct drm_atomic_state *old_atomic_state)
+#endif
 {

 }
diff --git a/kernel/nvidia-drm/nvidia-drm-drv.c b/kernel/nvidia-drm/nvidia-drm-drv.c
index 1b4cc6d..0c26646 100644
--- a/kernel/nvidia-drm/nvidia-drm-drv.c
+++ b/kernel/nvidia-drm/nvidia-drm-drv.c
@@ -20,6 +20,7 @@
  * DEALINGS IN THE SOFTWARE.
  */

+#include <linux/version.h>
 #include "nvidia-drm-conftest.h" /* NV_DRM_AVAILABLE and NV_DRM_DRM_GEM_H_PRESENT */

 #include "nvidia-drm-priv.h"
@@ -700,10 +701,13 @@ static struct drm_driver nv_drm_driver = {
     .num_ioctls             = ARRAY_SIZE(nv_drm_ioctls),

     .prime_handle_to_fd     = drm_gem_prime_handle_to_fd,
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
+    // Deprecated in favour of equivalent in drm_get_object in torvalds/linux commit d693def4fd1c23f1ca5aed1afb9993b3a2069ad2
     .gem_prime_export       = nv_drm_gem_prime_export,
     .gem_prime_get_sg_table = nv_drm_gem_prime_get_sg_table,
     .gem_prime_vmap         = nv_drm_gem_prime_vmap,
     .gem_prime_vunmap       = nv_drm_gem_prime_vunmap,
+#endif

 #if defined(NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ)
     .gem_prime_res_obj      = nv_drm_gem_prime_res_obj,
@@ -727,11 +731,14 @@ static struct drm_driver nv_drm_driver = {
     .desc                   = "NVIDIA DRM driver",
     .date                   = "20160202",

+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
+    // This is now behind a CONFIG_DRM_LEGACY Kconfig flag.(torvalds/linux commit 57bb1ee6034046be70aed33fd6d447bb2b7261fa)
 #if defined(NV_DRM_DRIVER_HAS_LEGACY_DEV_LIST)
     .legacy_dev_list        = LIST_HEAD_INIT(nv_drm_driver.legacy_dev_list),
 #else
     .device_list            = LIST_HEAD_INIT(nv_drm_driver.device_list),
 #endif
+#endif
 };


@@ -758,8 +765,6 @@ static void nv_drm_update_drm_driver_features(void)
     nv_drm_driver.dumb_create      = nv_drm_dumb_create;
     nv_drm_driver.dumb_map_offset  = nv_drm_dumb_map_offset;
     nv_drm_driver.dumb_destroy     = drm_gem_dumb_destroy;
-
-    nv_drm_driver.gem_vm_ops       = &nv_drm_gem_vma_ops;
 #endif /* NV_DRM_ATOMIC_MODESET_AVAILABLE */
 }

diff --git a/kernel/nvidia-drm/nvidia-drm-gem-user-memory.c b/kernel/nvidia-drm/nvidia-drm-gem-user-memory.c
index 4ac4559..28ef84c 100644
--- a/kernel/nvidia-drm/nvidia-drm-gem-user-memory.c
+++ b/kernel/nvidia-drm/nvidia-drm-gem-user-memory.c
@@ -20,6 +20,7 @@
  * DEALINGS IN THE SOFTWARE.
  */

+#include <linux/version.h>
 #include "nvidia-drm-conftest.h"

 #if defined(NV_DRM_AVAILABLE)
@@ -32,6 +33,8 @@
 #include "nvidia-drm-helper.h"
 #include "nvidia-drm-ioctl.h"

+#include "linux/dma-buf.h"
+
 static inline
 void __nv_drm_gem_user_memory_free(struct nv_drm_gem_object *nv_gem)
 {
@@ -54,6 +57,7 @@ static struct sg_table *__nv_drm_gem_user_memory_prime_get_sg_table(
                                     nv_user_memory->pages_count);
 }

+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
 static void *__nv_drm_gem_user_memory_prime_vmap(
     struct nv_drm_gem_object *nv_gem)
 {
@@ -69,6 +73,28 @@ static void __nv_drm_gem_user_memory_prime_vunmap(
 {
     nv_drm_vunmap(address);
 }
+#else
+// Updated vmap/vunmap operations to use struct dma_buf_map instead of raw pointers
+// See torvalds/linux commits ccc22d41bd9acec58cdc7c3b012e1887aba40af4, 6619ccf1bb1d0ebb071f758111efa83918b216fc
+static int __nv_drm_gem_user_memory_prime_vmap(
+    struct nv_drm_gem_object *nv_gem,
+    struct dma_buf_map *map)
+{
+    struct nv_drm_gem_user_memory *nv_user_memory = to_nv_user_memory(nv_gem);
+
+    map->vaddr = nv_drm_vmap(nv_user_memory->pages,
+                           nv_user_memory->pages_count);
+    map->is_iomem = false;
+    return 0;
+}
+
+static void __nv_drm_gem_user_memory_prime_vunmap(
+    struct nv_drm_gem_object *gem,
+    struct dma_buf_map *map)
+{
+    nv_drm_vunmap(map->vaddr);
+}
+#endif

 static struct nv_drm_gem_object_funcs __nv_gem_user_memory_ops = {
     .free = __nv_drm_gem_user_memory_free,
diff --git a/kernel/nvidia-drm/nvidia-drm-gem.c b/kernel/nvidia-drm/nvidia-drm-gem.c
index 4ab8b36..9556993 100644
--- a/kernel/nvidia-drm/nvidia-drm-gem.c
+++ b/kernel/nvidia-drm/nvidia-drm-gem.c
@@ -20,6 +20,7 @@
  * DEALINGS IN THE SOFTWARE.
  */

+#include <linux/version.h>
 #include "nvidia-drm-conftest.h"

 #if defined(NV_DRM_AVAILABLE)
@@ -29,6 +30,7 @@
 #include "nvidia-drm-prime-fence.h"
 #include "nvidia-drm-gem.h"
 #include "nvidia-dma-resv-helper.h"
+#include "nvidia-drm-gem-nvkms-memory.h"

 #if defined(NV_DRM_DRM_PRIME_H_PRESENT)
 #include <drm/drm_prime.h>
@@ -56,6 +58,13 @@ void nv_drm_gem_free(struct drm_gem_object *gem)
 static struct drm_gem_object_funcs nv_drm_gem_funcs = {
     .free = nv_drm_gem_free,
     .get_sg_table = nv_drm_gem_prime_get_sg_table,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 11, 0))
+    // New functions moved from drm_driver because of torvalds/linux commit d693def4fd1c23f1ca5aed1afb9993b3a2069ad2
+    .export       = drm_gem_prime_export,
+    .vmap         = nv_drm_gem_prime_vmap,
+    .vunmap       = nv_drm_gem_prime_vunmap,
+    .vm_ops       = &nv_drm_gem_vma_ops,
+#endif
 };
 #endif

@@ -124,6 +133,7 @@ struct sg_table *nv_drm_gem_prime_get_sg_table(struct drm_gem_object *gem)
     return ERR_PTR(-ENOTSUPP);
 }

+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
 void *nv_drm_gem_prime_vmap(struct drm_gem_object *gem)
 {
     struct nv_drm_gem_object *nv_gem = to_nv_gem_object(gem);
@@ -143,6 +153,29 @@ void nv_drm_gem_prime_vunmap(struct drm_gem_object *gem, void *address)
         nv_gem->ops->prime_vunmap(nv_gem, address);
     }
 }
+#else
+// Updated vmap/vunmap operations to use struct dma_buf_map instead of raw pointers
+// See torvalds/linux commits ccc22d41bd9acec58cdc7c3b012e1887aba40af4, 6619ccf1bb1d0ebb071f758111efa83918b216fc
+int nv_drm_gem_prime_vmap(struct drm_gem_object *gem, struct dma_buf_map *map)
+{
+    struct nv_drm_gem_object *nv_gem = to_nv_gem_object(gem);
+
+    if (nv_gem->ops->prime_vmap != NULL) {
+        return nv_gem->ops->prime_vmap(nv_gem, map);
+    }
+
+    return -ENOTSUPP;
+}
+
+void nv_drm_gem_prime_vunmap(struct drm_gem_object *gem, struct dma_buf_map *map)
+{
+    struct nv_drm_gem_object *nv_gem = to_nv_gem_object(gem);
+
+    if (nv_gem->ops->prime_vunmap != NULL) {
+        nv_gem->ops->prime_vunmap(nv_gem, map);
+    }
+}
+#endif

 #if defined(NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ)
 nv_dma_resv_t* nv_drm_gem_prime_res_obj(struct drm_gem_object *obj)
diff --git a/kernel/nvidia-drm/nvidia-drm-gem.h b/kernel/nvidia-drm/nvidia-drm-gem.h
index fd64b2d..e12fafb 100644
--- a/kernel/nvidia-drm/nvidia-drm-gem.h
+++ b/kernel/nvidia-drm/nvidia-drm-gem.h
@@ -23,6 +23,7 @@
 #ifndef __NVIDIA_DRM_GEM_H__
 #define __NVIDIA_DRM_GEM_H__

+#include <linux/version.h>
 #include "nvidia-drm-conftest.h"

 #if defined(NV_DRM_AVAILABLE)
@@ -44,13 +45,22 @@
 #include "nvidia-dma-resv-helper.h"
 #endif

+#include "linux/dma-buf.h"
+
 struct nv_drm_gem_object;

 struct nv_drm_gem_object_funcs {
     void (*free)(struct nv_drm_gem_object *nv_gem);
     struct sg_table *(*prime_get_sg_table)(struct nv_drm_gem_object *nv_gem);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
     void *(*prime_vmap)(struct nv_drm_gem_object *nv_gem);
     void (*prime_vunmap)(struct nv_drm_gem_object *nv_gem, void *address);
+#else
+    // Updated vmap/vunmap operations to use struct dma_buf_map instead of raw pointers
+    // See torvalds/linux commits ccc22d41bd9acec58cdc7c3b012e1887aba40af4, 6619ccf1bb1d0ebb071f758111efa83918b216fc
+    int (*prime_vmap)(struct nv_drm_gem_object *nv_gem, struct dma_buf_map *map);
+    void (*prime_vunmap)(struct nv_drm_gem_object *nv_gem, struct dma_buf_map *map);
+#endif
 };

 struct nv_drm_gem_object {
@@ -185,9 +195,17 @@ void nv_drm_gem_object_init(struct nv_drm_device *nv_dev,

 struct sg_table *nv_drm_gem_prime_get_sg_table(struct drm_gem_object *gem);

+#if (LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0))
 void *nv_drm_gem_prime_vmap(struct drm_gem_object *gem);

 void nv_drm_gem_prime_vunmap(struct drm_gem_object *gem, void *address);
+#else
+// Updated vmap/vunmap operations to use struct dma_buf_map instead of raw pointers
+// See torvalds/linux commits ccc22d41bd9acec58cdc7c3b012e1887aba40af4, 6619ccf1bb1d0ebb071f758111efa83918b216fc
+int nv_drm_gem_prime_vmap(struct drm_gem_object *gem, struct dma_buf_map *map);
+
+void nv_drm_gem_prime_vunmap(struct drm_gem_object *gem, struct dma_buf_map *map);
+#endif

 #if defined(NV_DRM_DRIVER_HAS_GEM_PRIME_RES_OBJ)
 nv_dma_resv_t* nv_drm_gem_prime_res_obj(struct drm_gem_object *obj);
