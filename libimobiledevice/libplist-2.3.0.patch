From: Boyuan Yang <byang@debian.org>
Date: Tue, 1 Aug 2023 00:29:53 -0400
Subject: Patch for libplist 2.3.0

Cherry-picked from
https://github.com/libimobiledevice/libimobiledevice/commit/eda2c5ea71829f11d69342e6858d09aa53943938
, also with heavy modification.

This patch should be dropped once libimobiledevice (>> 1.3.0) is
released and packaged.
---
 common/utils.c              | 66 ---------------------------------------------
 common/utils.h              | 10 -------
 configure.ac                |  2 +-
 tools/idevicebackup.c       | 23 ++++++++--------
 tools/idevicebackup2.c      |  9 ++++---
 tools/idevicecrashreport.c  |  2 +-
 tools/ideviceimagemounter.c | 40 +++++----------------------
 tools/ideviceinfo.c         |  4 +--
 tools/ideviceprovision.c    |  2 +-
 9 files changed, 28 insertions(+), 130 deletions(-)

diff --git a/common/utils.c b/common/utils.c
index 7f66ec2..7ea96bf 100644
--- a/common/utils.c
+++ b/common/utils.c
@@ -289,53 +289,6 @@ void buffer_write_to_filename(const char *filename, const char *buffer, uint64_t
 	}
 }
 
-int plist_read_from_filename(plist_t *plist, const char *filename)
-{
-	char *buffer = NULL;
-	uint64_t length;
-
-	if (!filename)
-		return 0;
-
-	buffer_read_from_filename(filename, &buffer, &length);
-
-	if (!buffer) {
-		return 0;
-	}
-
-	if ((length > 8) && (memcmp(buffer, "bplist00", 8) == 0)) {
-		plist_from_bin(buffer, length, plist);
-	} else {
-		plist_from_xml(buffer, length, plist);
-	}
-
-	free(buffer);
-
-	return 1;
-}
-
-int plist_write_to_filename(plist_t plist, const char *filename, enum plist_format_t format)
-{
-	char *buffer = NULL;
-	uint32_t length;
-
-	if (!plist || !filename)
-		return 0;
-
-	if (format == PLIST_FORMAT_XML)
-		plist_to_xml(plist, &buffer, &length);
-	else if (format == PLIST_FORMAT_BINARY)
-		plist_to_bin(plist, &buffer, &length);
-	else
-		return 0;
-
-	buffer_write_to_filename(filename, buffer, length);
-
-	free(buffer);
-
-	return 1;
-}
-
 static const char base64_str[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
 static const char base64_pad = '=';
 
@@ -509,22 +462,3 @@ static void plist_node_print_to_stream(plist_t node, int* indent_level, FILE* st
 		break;
 	}
 }
-
-void plist_print_to_stream(plist_t plist, FILE* stream)
-{
-	int indent = 0;
-
-	if (!plist || !stream)
-		return;
-
-	switch (plist_get_node_type(plist)) {
-	case PLIST_DICT:
-		plist_dict_print_to_stream(plist, &indent, stream);
-		break;
-	case PLIST_ARRAY:
-		plist_array_print_to_stream(plist, &indent, stream);
-		break;
-	default:
-		plist_node_print_to_stream(plist, &indent, stream);
-	}
-}
diff --git a/common/utils.h b/common/utils.h
index 2c3acec..dc6679b 100644
--- a/common/utils.h
+++ b/common/utils.h
@@ -51,14 +51,4 @@ char *generate_uuid(void);
 void buffer_read_from_filename(const char *filename, char **buffer, uint64_t *length);
 void buffer_write_to_filename(const char *filename, const char *buffer, uint64_t length);
 
-enum plist_format_t {
-	PLIST_FORMAT_XML,
-	PLIST_FORMAT_BINARY
-};
-
-int plist_read_from_filename(plist_t *plist, const char *filename);
-int plist_write_to_filename(plist_t plist, const char *filename, enum plist_format_t format);
-
-void plist_print_to_stream(plist_t plist, FILE* stream);
-
 #endif
diff --git a/configure.ac b/configure.ac
index 7082ca9..1727144 100644
--- a/configure.ac
+++ b/configure.ac
@@ -19,7 +19,7 @@ LIBIMOBILEDEVICE_SO_VERSION=6:0:0
 
 dnl Minimum package versions
 LIBUSBMUXD_VERSION=2.0.2
-LIBPLIST_VERSION=2.2.0
+LIBPLIST_VERSION=2.3.0
 
 AC_SUBST(LIBIMOBILEDEVICE_SO_VERSION)
 AC_SUBST(LIBUSBMUXD_VERSION)
diff --git a/tools/idevicebackup.c b/tools/idevicebackup.c
index dfd7b8b..6bc1352 100644
--- a/tools/idevicebackup.c
+++ b/tools/idevicebackup.c
@@ -45,6 +45,7 @@
 #include <libimobiledevice/mobilebackup.h>
 #include <libimobiledevice/notification_proxy.h>
 #include <libimobiledevice/afc.h>
+#include <plist/plist.h>
 #include "common/utils.h"
 
 #define MOBILEBACKUP_SERVICE_NAME "com.apple.mobilebackup"
@@ -331,7 +332,7 @@ static void mobilebackup_write_status(const char *path, int status)
 	if (stat(file_path, &st) == 0)
 		remove(file_path);
 
-	plist_write_to_filename(status_plist, file_path, PLIST_FORMAT_XML);
+	plist_write_to_file(status_plist, file_path, PLIST_FORMAT_XML, 0);
 
 	plist_free(status_plist);
 	status_plist = NULL;
@@ -345,7 +346,7 @@ static int mobilebackup_read_status(const char *path)
 	plist_t status_plist = NULL;
 	char *file_path = mobilebackup_build_path(path, "Status", ".plist");
 
-	plist_read_from_filename(&status_plist, file_path);
+	plist_read_from_file(file_path, &status_plist, NULL);
 	free(file_path);
 	if (!status_plist) {
 		printf("Could not read Status.plist!\n");
@@ -468,7 +469,7 @@ static int mobilebackup_check_file_integrity(const char *backup_directory, const
 	}
 
 	infopath = mobilebackup_build_path(backup_directory, hash, ".mdinfo");
-	plist_read_from_filename(&mdinfo, infopath);
+	plist_read_from_file(infopath, &mdinfo, NULL);
 	free(infopath);
 	if (!mdinfo) {
 		printf("\r\n");
@@ -880,7 +881,7 @@ int main(int argc, char *argv[])
 		/* verify existing Info.plist */
 		if (stat(info_path, &st) == 0) {
 			printf("Reading Info.plist from backup.\n");
-			plist_read_from_filename(&info_plist, info_path);
+			plist_read_from_file(info_path, &info_plist, NULL);
 
 			if (!info_plist) {
 				printf("Could not read Info.plist\n");
@@ -891,7 +892,7 @@ int main(int argc, char *argv[])
 					/* update the last backup time within Info.plist */
 					mobilebackup_info_update_last_backup_date(info_plist);
 					remove(info_path);
-					plist_write_to_filename(info_plist, info_path, PLIST_FORMAT_XML);
+					plist_write_to_file(info_plist, info_path, PLIST_FORMAT_XML, 0);
 				} else {
 					printf("Aborting backup. Backup is not compatible with the current device.\n");
 					cmd = CMD_LEAVE;
@@ -956,7 +957,7 @@ int main(int argc, char *argv[])
 			/* read the last Manifest.plist */
 			if (!is_full_backup) {
 				printf("Reading existing Manifest.\n");
-				plist_read_from_filename(&manifest_plist, manifest_path);
+				plist_read_from_file(manifest_path, &manifest_plist, NULL);
 				if (!manifest_plist) {
 					printf("Could not read Manifest.plist, switching to full backup mode.\n");
 					is_full_backup = 1;
@@ -974,7 +975,7 @@ int main(int argc, char *argv[])
 				remove(info_path);
 				printf("Creating Info.plist for new backup.\n");
 				info_plist = mobilebackup_factory_info_plist_new(udid);
-				plist_write_to_filename(info_plist, info_path, PLIST_FORMAT_XML);
+				plist_write_to_file(info_plist, info_path, PLIST_FORMAT_XML, 0);
 			}
 			free(info_path);
 
@@ -1112,7 +1113,7 @@ int main(int argc, char *argv[])
 							remove(filename_mdinfo);
 
 						node = plist_dict_get_item(node_tmp, "BackupFileInfo");
-						plist_write_to_filename(node, filename_mdinfo, PLIST_FORMAT_BINARY);
+						plist_write_to_file(node, filename_mdinfo, PLIST_FORMAT_BINARY, 0);
 
 						free(filename_mdinfo);
 					}
@@ -1225,7 +1226,7 @@ files_out:
 					if (manifest_plist) {
 						remove(manifest_path);
 						printf("Storing Manifest.plist...\n");
-						plist_write_to_filename(manifest_plist, manifest_path, PLIST_FORMAT_XML);
+						plist_write_to_file(manifest_plist, manifest_path, PLIST_FORMAT_XML, 0);
 					}
 
 					backup_ok = 1;
@@ -1256,7 +1257,7 @@ files_out:
 			}
 			/* now make sure backup integrity is ok! verify all files */
 			printf("Reading existing Manifest.\n");
-			plist_read_from_filename(&manifest_plist, manifest_path);
+			plist_read_from_file(manifest_path, &manifest_plist, NULL);
 			if (!manifest_plist) {
 				printf("Could not read Manifest.plist. Aborting.\n");
 				break;
@@ -1383,7 +1384,7 @@ files_out:
 					while (node) {
 						/* TODO: read mddata/mdinfo files and send to device using DLSendFile */
 						file_info_path = mobilebackup_build_path(backup_directory, hash, ".mdinfo");
-						plist_read_from_filename(&file_info, file_info_path);
+						plist_read_from_file(file_info_path, &file_info, NULL);
 
 						/* get encryption state */
 						tmp_node = plist_dict_get_item(file_info, "IsEncrypted");
diff --git a/tools/idevicebackup2.c b/tools/idevicebackup2.c
index 9bbb311..c07ee9a 100644
--- a/tools/idevicebackup2.c
+++ b/tools/idevicebackup2.c
@@ -45,6 +45,7 @@
 #include <libimobiledevice/installation_proxy.h>
 #include <libimobiledevice/sbservices.h>
 #include <libimobiledevice/diagnostics_relay.h>
+#include <plist/plist.h>
 #include "common/utils.h"
 
 #include <endianness.h>
@@ -601,7 +602,7 @@ static int mb2_status_check_snapshot_state(const char *path, const char *udid, c
 	plist_t status_plist = NULL;
 	char *file_path = string_build_path(path, udid, "Status.plist", NULL);
 
-	plist_read_from_filename(&status_plist, file_path);
+	plist_read_from_file(file_path, &status_plist, NULL);
 	free(file_path);
 	if (!status_plist) {
 		printf("Could not read Status.plist!\n");
@@ -1716,7 +1717,7 @@ int main(int argc, char *argv[])
 				free(info_path);
 			}
 			plist_t manifest_plist = NULL;
-			plist_read_from_filename(&manifest_plist, manifest_path);
+			plist_read_from_file(manifest_path, &manifest_plist, NULL);
 			if (!manifest_plist) {
 				idevice_free(device);
 				free(info_path);
@@ -1862,7 +1863,7 @@ int main(int argc, char *argv[])
 		/* verify existing Info.plist */
 		if (info_path && (stat(info_path, &st) == 0) && cmd != CMD_CLOUD) {
 			PRINT_VERBOSE(1, "Reading Info.plist from backup.\n");
-			plist_read_from_filename(&info_plist, info_path);
+			plist_read_from_file(info_path, &info_plist, NULL);
 
 			if (!info_plist) {
 				printf("Could not read Info.plist\n");
@@ -1956,7 +1957,7 @@ checkpoint:
 				cmd = CMD_LEAVE;
 			}
 			remove_file(info_path);
-			plist_write_to_filename(info_plist, info_path, PLIST_FORMAT_XML);
+			plist_write_to_file(info_plist, info_path, PLIST_FORMAT_XML, 0);
 			free(info_path);
 
 			plist_free(info_plist);
diff --git a/tools/idevicecrashreport.c b/tools/idevicecrashreport.c
index 2945111..801eafc 100644
--- a/tools/idevicecrashreport.c
+++ b/tools/idevicecrashreport.c
@@ -77,7 +77,7 @@ static int extract_raw_crash_report(const char* filename)
 	strcpy(p, ".crash");
 
 	/* read plist crash report */
-	if (plist_read_from_filename(&report, filename)) {
+	if (plist_read_from_file(filename, &report, NULL)) {
 		plist_t description_node = plist_dict_get_item(report, "description");
 		if (description_node && plist_get_node_type(description_node) == PLIST_STRING) {
 			plist_get_string_val(description_node, &raw);
diff --git a/tools/ideviceimagemounter.c b/tools/ideviceimagemounter.c
index 325a9e2..9c61a87 100644
--- a/tools/ideviceimagemounter.c
+++ b/tools/ideviceimagemounter.c
@@ -46,6 +46,7 @@
 #include <libimobiledevice/notification_proxy.h>
 #include <libimobiledevice/mobile_image_mounter.h>
 #include <asprintf.h>
+#include <plist/plist.h>
 #include "common/utils.h"
 
 static int list_mode = 0;
@@ -143,15 +144,6 @@ static void parse_opts(int argc, char **argv)
 	}
 }
 
-static void print_xml(plist_t node)
-{
-	char *xml = NULL;
-	uint32_t len = 0;
-	plist_to_xml(node, &xml, &len);
-	if (xml)
-		puts(xml);
-}
-
 static ssize_t mim_upload_cb(void* buf, size_t size, void* userdata)
 {
 	return fread(buf, 1, size, (FILE*)userdata);
@@ -283,11 +275,7 @@ int main(int argc, char **argv)
 		err = mobile_image_mounter_lookup_image(mim, imagetype, &result);
 		if (err == MOBILE_IMAGE_MOUNTER_E_SUCCESS) {
 			res = 0;
-			if (xml_mode) {
-				print_xml(result);
-			} else {
-				plist_print_to_stream(result, stdout);
-			}
+            plist_write_to_stream(result, stdout, (xml_mode) ? PLIST_FORMAT_XML : PLIST_FORMAT_LIMD, 0);
 		} else {
 			printf("Error: lookup_image returned %d\n", err);
 		}
@@ -415,20 +403,12 @@ int main(int argc, char **argv)
 							res = 0;
 						} else {
 							printf("unexpected status value:\n");
-							if (xml_mode) {
-								print_xml(result);
-							} else {
-								plist_print_to_stream(result, stdout);
-							}
+                            plist_write_to_stream(result, stdout, (xml_mode) ? PLIST_FORMAT_XML : PLIST_FORMAT_LIMD, 0);
 						}
 						free(status);
 					} else {
 						printf("unexpected result:\n");
-						if (xml_mode) {
-							print_xml(result);
-						} else {
-							plist_print_to_stream(result, stdout);
-						}
+                        plist_write_to_stream(result, stdout, (xml_mode) ? PLIST_FORMAT_XML : PLIST_FORMAT_LIMD, 0);
 					}
 				}
 				node = plist_dict_get_item(result, "Error");
@@ -440,19 +420,11 @@ int main(int argc, char **argv)
 						free(error);
 					} else {
 						printf("unexpected result:\n");
-						if (xml_mode) {
-							print_xml(result);
-						} else {
-							plist_print_to_stream(result, stdout);
-						}
+                        plist_write_to_stream(result, stdout, (xml_mode) ? PLIST_FORMAT_XML : PLIST_FORMAT_LIMD, 0);
 					}
 
 				} else {
-					if (xml_mode) {
-						print_xml(result);
-					} else {
-						plist_print_to_stream(result, stdout);
-					}
+                    plist_write_to_stream(result, stdout, (xml_mode) ? PLIST_FORMAT_XML : PLIST_FORMAT_LIMD, 0);
 				}
 			}
 		} else {
diff --git a/tools/ideviceinfo.c b/tools/ideviceinfo.c
index 97ae03a..247ce09 100644
--- a/tools/ideviceinfo.c
+++ b/tools/ideviceinfo.c
@@ -240,11 +240,11 @@ int main(int argc, char *argv[])
 				free(xml_doc);
 				break;
 			case FORMAT_KEY_VALUE:
-				plist_print_to_stream(node, stdout);
+                plist_write_to_stream(node, stdout, PLIST_FORMAT_LIMD, 0);
 				break;
 			default:
 				if (key != NULL)
-					plist_print_to_stream(node, stdout);
+                    plist_write_to_stream(node, stdout, PLIST_FORMAT_LIMD, 0);
 			break;
 			}
 			plist_free(node);
diff --git a/tools/ideviceprovision.c b/tools/ideviceprovision.c
index c93a682..016ee5d 100644
--- a/tools/ideviceprovision.c
+++ b/tools/ideviceprovision.c
@@ -422,7 +422,7 @@ int main(int argc, char *argv[])
 				}
 			} else {
 				if (pl && (plist_get_node_type(pl) == PLIST_DICT)) {
-					plist_print_to_stream(pl, stdout);
+                    plist_write_to_stream(pl, stdout, PLIST_FORMAT_LIMD, 0);
 				} else {
 					fprintf(stderr, "ERROR: unexpected node type in profile plist (not PLIST_DICT)\n");
 					res = -1;

